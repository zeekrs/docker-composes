services:
  gitlab:
    container_name: gitlab
    image: gitlab/gitlab-ce:latest
    restart: always
    hostname: ${GITLAB_HOSTNAME}
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://${GITLAB_HOSTNAME}'
        gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT}
        gitlab_rails['gitlab_ssh_host'] = '${GITLAB_SSH_HOST}'
        # Add any other gitlab.rb configuration here, each on its own line
    ports:
      - ${GITLAB_PORT}:80
      - ${GITLAB_SSL_PORT}:443
      - ${GITLAB_SSH_PORT}:22
    volumes:
      - ${GITLAB_DIR}/config:/etc/gitlab
      - ${GITLAB_DIR}/logs:/var/log/gitlab
      - ${GITLAB_DIR}/data:/var/opt/gitlab
    networks:
      - devops
    shm_size: "256m"
  drone-database:
    container_name: drone-database
    hostname: drone-database
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=drone
      - POSTGRES_PASSWORD=drone
    volumes:
      - ${DRONE_DATA_DIR}:/var/lib/postgresql/data
    networks:
      - devops

  drone-server:
    container_name: drone
    image: drone/drone:latest
    restart: always
    hostname: ${DRONE_HOSTNAME}
    environment:
      - DRONE_GITLAB_SERVER=http://${GITLAB_HOSTNAME}
      - DRONE_GITLAB_CLIENT_ID=${DRONE_GITLAB_CLIENT_ID}
      - DRONE_GITLAB_CLIENT_SECRET=${DRONE_GITLAB_CLIENT_SECRET}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_SERVER_HOST=${DRONE_HOSTNAME}
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_USER_CREATE=username:${DRONE_ADMIN_USERNAME},admin:true
      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgres://drone:drone@drone-database:5432/drone?sslmode=disable
      - DRONE_LOGS_DEBUG=true
      - DRONE_LOGS_TEXT=true
      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_COLOR=true
    ports:
      - ${DRONE_PORT}:80
      - ${DRONE_SSL_PORT}:443
    depends_on:
      - gitlab
      - drone-database
    networks:
      - devops

  drone-runner:
    container_name: drone-runner
    hostname: drone-runner
    image: drone/drone-runner-docker:latest
    restart: always
    environment:
      - DRONE_RPC_HOST=${DRONE_HOSTNAME}
      - DRONE_RPC_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY}
      - DRONE_RUNNER_NAME=${DRONE_RUNNER_NAME}
      - DRONE_DEBUG=true
      - DRONE_TRACE=true
      - DRONE_RPC_DUMP_HTTP=true
      - DRONE_RPC_DUMP_HTTP_BODY=true
      - DRONE_RUNNER_NETWORKS=devops,dev
      - DRONE_UI_USERNAME=root
      - DRONE_UI_PASSWORD=root
    ports:
      - ${DRONE_RUNNER_PORT}:3000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - drone-server
    networks:
      - devops
networks:
  devops:
    external: true
